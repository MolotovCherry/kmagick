package com.cherryleafroad.kmagick

class DrawingWandException(message: String) : MagickException(message)

/**
 * A DrawingWand.
 *
 * @constructor Creates a new DrawingWand
 */
class DrawingWand {
    init {
        new()
    }

    /**
     * Holds the pointer to internal object in memory.
     */
    private var HANDLE: Long = 0

    /**
     * Create a new DrawingWand.
     */
    private external fun new()

    /**
     * Verifies whether or not this is a DrawingWand.
     *
     * @return Whether or not this is a verified DrawingWand.
     */
    external fun isWand(): Boolean

    /**
     * Clone the wand into a new one.
     *
     * @return The cloned DrawingWand.
     */
    external fun clone(): DrawingWand

    /**
     * Clear the wand contents.
     */
    external fun clear()

    /**
     * While this automatically gets called by the `finalize()` destructor,
     * `finalize()` is not guaranteed to be called at all, nor called on time.
     * It's recommended to manually destroy all wands when finished.
     */
    external fun destroy()

    /**
     * While this is here to automatically call the destructor, due to
     * the way Kotlin/Java works, it's not guaranteed to be called at all,
     * or called on time. It is not recommended to rely on this to destroy
     * the wand consistently/timely.
     */
    protected fun finalize() {
        destroy()
    }

    /**
     * Draws text on the image.
     *
     * @param x The x ordinate to left of text.
     * @param y The y ordinate to text baseline.
     * @param text The text to draw.
     */
    @Throws(DrawingWandException::class)
    external fun drawAnnotation(x: Double, y: Double, text: String)

    /**
     * Returns the font used when annotating with text.
     */
    @Throws(DrawingWandException::class)
    external fun drawGetFont(): String
    /**
     * Sets the fully-sepecified font to use when annotating with text.
     */
    @Throws(DrawingWandException::class)
    external fun drawSetFont(fontName: String)

    /**
     * Returns the font family to use when annotating with text.
     */
    @Throws(DrawingWandException::class)
    external fun drawGetFontFamily(): String
    /**
     * Sets the font family to use when annotating with text.
     */
    @Throws(DrawingWandException::class)
    external fun drawSetFontFamily(fontFamily: String)

    /**
     * Returns the vector graphics generated by any graphics calls made since the wand was instantiated.
     */
    @Throws(DrawingWandException::class)
    external fun drawGetVectorGraphics(): String
    /**
     * Sets the vector graphics associated with the specified wand.
     * Use this method with `DrawGetVectorGraphics()` as a method to persist the vector graphics state.
     *
     * @param xml The drawingWand XML.
     */
    @Throws(DrawingWandException::class)
    external fun drawSetVectorGraphics(xml: String)

    /**
     * Obtains the current clipping path ID.
     */
    @Throws(DrawingWandException::class)
    external fun drawGetClipPath(): String
    /**
     * Associates a named clipping path with the image.
     * Only the areas drawn on by the clipping path will be modified as ssize_t as it remains in effect.
     *
     * @param clipMask Name of clipping path to associate with image.
     */
    @Throws(DrawingWandException::class)
    external fun drawSetClipPath(clipMask: String)

    /**
     * Returns the code set used for text annotations.
     */
    @Throws(DrawingWandException::class)
    external fun drawGetTextEncoding(): String
    /**
     * Specifies the code set to use for text annotations. The only character encoding which may be specified at
     * this time is "UTF-8" for representing Unicode as a sequence of bytes. Specify an empty string to set text
     * encoding to the system's default. Successful text annotation using Unicode may require fonts designed to
     * support Unicode.
     *
     * @param encoding Specifies the text encoding.
     */
    @Throws(DrawingWandException::class)
    external fun drawSetTextEncoding(encoding: String)

    /**
     * Returns the border color used for drawing bordered objects.
     */
    external fun drawGetBorderColor(): PixelWand
    /**
     * Sets the border color to be used for drawing bordered objects.
     *
     * @param borderWand The border wand.
     */
    external fun drawSetBorderColor(borderWand: PixelWand)

    /**
     * Returns the fill color used for drawing filled objects.
     *
     * @return The fill color.
     */
    external fun drawGetFillColor(): PixelWand
    /**
     * Sets the fill color to be used for drawing filled objects.
     *
     * @param fillWand The fill Wand.
     */
    external fun drawSetFillColor(fillWand: PixelWand)

    /**
     * Returns the color used for stroking object outlines.
     *
     * @return The stroke color.
     */
    external fun drawGetStrokeColor(): PixelWand
    /**
     * Sets the color used for stroking object outlines.
     *
     * @param strokeWand The stroke wand.
     */
    external fun drawSetStrokeColor(strokeWand: PixelWand)

    /**
     * Returns the color of a background rectangle to place under text annotations.
     *
     * @return The undercolor.
     */
    external fun drawGetTextUnderColor(): PixelWand
    /**
     * Specifies the color of a background rectangle to place under text annotations.
     *
     * @param underWand Text under wand.
     */
    external fun drawSetTextUnderColor(underWand: PixelWand)

    /**
     * Returns the text placement gravity used when annotating with text.
     */
    extern fun drawGetGravity(): GravityType
    /**
     * Sets the text placement gravity to use when annotating with text.
     *
     * @param gravity Positioning gravity.
     */
    extern fun drawSetGravity(gravity: GravityType)

    /**
     * Returns the alpha used when drawing with the fill or stroke color or texture. Fully opaque is 1.0.
     */
    extern fun drawGetOpacity(): Double
    /**
     * Sets the alpha to use when drawing using the fill or stroke color or texture. Fully opaque is 1.0.
     *
     * @param opacity Fill and stroke opacity. The value 1.0 is opaque.
     */
    extern fun drawSetOpacity(opacity: Double)

    /**
     *
     *
     * @param
     */
    extern fun drawGetClipRule()
    /**
     *
     *
     * @param
     */
    extern fun drawSetClipRule()

    /**
     *
     *
     * @param
     */
    extern fun drawGetClipUnits()
    /**
     *
     *
     * @param
     */
    extern fun drawSetClipUnits()

    /**
     *
     *
     * @param
     */
    extern fun drawGetFillRule()
    /**
     *
     *
     * @param
     */
    extern fun drawSetFillRule()

    /**
     *
     *
     * @param
     */
    extern fun drawGetFillOpacity()
    /**
     *
     *
     * @param
     */
    extern fun drawSetFillOpacity()

    /**
     *
     *
     * @param
     */
    extern fun drawGetFontSize()
    /**
     *
     *
     * @param
     */
    extern fun drawSetFontSize()
    /**
     *
     *
     * @param
     */
    extern fun drawGetFontStyle()
    /**
     *
     *
     * @param
     */
    extern fun drawSetFontStyle()

    /**
     *
     *
     * @param
     */
    extern fun drawGetFontWeight()
    /**
     *
     *
     * @param
     */
    extern fun drawSetFontWeight()

    /**
     *
     *
     * @param
     */
    extern fun drawGetFontStretch()
    /**
     *
     *
     * @param
     */
    extern fun drawSetFontStretch()

    /**
     *
     *
     * @param
     */
    extern fun drawGetStrokeDashOffset()
    /**
     *
     *
     * @param
     */
    extern fun drawSetStrokeDashOffset()

    /**
     *
     *
     * @param
     */
    extern fun drawGetStrokeLineCap()
    /**
     *
     *
     * @param
     */
    extern fun drawSetStrokeLineCap()

    /**
     *
     *
     * @param
     */
    extern fun drawGetStrokeLineJoin()
    /**
     *
     *
     * @param
     */
    extern fun drawSetStrokeLineJoin()

    /**
     *
     *
     * @param
     */
    extern fun drawGetStrokeMiterLimit()
    /**
     *
     *
     * @param
     */
    extern fun drawSetStrokeMiterLimit()

    /**
     *
     *
     * @param
     */
    extern fun drawGetStrokeOpacity()
    /**
     *
     *
     * @param
     */
    extern fun drawSetStrokeOpacity()

    /**
     *
     *
     * @param
     */
    extern fun drawGetStrokeWidth()
    /**
     *
     *
     * @param
     */
    extern fun drawSetStrokeWidth()

    /**
     *
     *
     * @param
     */
    extern fun drawGetStrokeAntialias()
    /**
     *
     *
     * @param
     */
    extern fun drawSetStrokeAntialias()

    /**
     *
     *
     * @param
     */
    extern fun drawGetTextAlignment()
    /**
     *
     *
     * @param
     */
    extern fun drawSetTextAlignment()

    /**
     *
     *
     * @param
     */
    extern fun drawGetTextAntialias()
    /**
     *
     *
     * @param
     */
    extern fun drawSetTextAntialias()

    /**
     *
     *
     * @param
     */
    extern fun drawGetTextDecoration()
    /**
     *
     *
     * @param
     */
    extern fun drawSetTextDecoration()

    /**
     *
     *
     * @param
     */
    extern fun drawGetTextDirection()
    /**
     *
     *
     * @param
     */
    extern fun drawSetTextDirection()

    /**
     *
     *
     * @param
     */
    extern fun drawGetTextKerning()
    /**
     *
     *
     * @param
     */
    extern fun drawSetTextKerning()

    /**
     *
     *
     * @param
     */
    extern fun drawGetTextInterlineSpacing()
    /**
     *
     *
     * @param
     */
    extern fun drawSetTextInterlineSpacing()

    /**
     *
     *
     * @param
     */
    extern fun drawGetTextInterwordSpacing()
    /**
     *
     *
     * @param
     */
    extern fun drawSetTextInterwordSpacing()
}
